datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Product {
    id               String             @id @default(uuid())
    name             String
    createdAt        DateTime           @default(now())
    ProductVariation ProductVariation[]
}

model ProductVariation {
    id             String   @id @default(uuid())
    price          Float
    colorHex       String
    colorName      String
    product_id     String
    Product        Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
    Image          Image[]
    createdAt      DateTime @default(now())
    availableSizes String?
    description    String?  @db.Text

    @@map("ProductVariation")
}

model Image {
    id               String             @id @default(uuid())
    imageSrc         String?
    ProductVariation ProductVariation[]
    createdAt        DateTime           @default(now())
}

model ProductCategory {
    id                  String          @id @default(uuid())
    imageBackgroundName String
    imageBackgroundLink String
    name                String
    hifen               String
    active              Boolean         @default(true)
    filters             ProductFilter[]
    HeaderItem          HeaderItem[]
    HeaderSubItem       HeaderSubItem[]
}

model HeaderItem {
    id                    String           @id @default(uuid())
    name                  String
    backgroundImageLink   String?
    backgroundImageName   String?
    backgroundImageLinkTo String?
    category_id           String?
    ProductCategory       ProductCategory? @relation(fields: [category_id], references: [id], onDelete: Cascade)
    HeaderSubItem         HeaderSubItem[]
}

model HeaderSubItem {
    id                   String          @id @default(uuid())
    name                 String
    HeaderItem           HeaderItem[]
    category_id          String
    ProductCategory      ProductCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
    columnPosition       Int
    isHighlightedSubItem Boolean         @default(false)
}

model ProductFilter {
    id              String            @id @default(uuid())
    name            String
    hifen           String
    productCategory ProductCategory[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?
    password      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model CarrousselImage {
    id               String  @id @default(uuid())
    desktopImageName String?
    desktopLink      String
    desktopKey       String
    mobileImageName  String?
    mobileLink       String
    mobileKey        String
    active           Boolean @default(true)
}

model HighlightHomeImages {
    id         String @id @default(uuid())
    image1Link String
    image1Key  String
    image2Link String
    image2Key  String
}

model MainBackgroundHome {
    id          String @id @default(uuid())
    desktopLink String
    desktopKey  String
    mobileLink  String
    mobileKey   String
}
